MERGE INTO
  SISTERM A
USING
  (
    SELECT
      CASE SUBSTR(STVTERM_CODE, -2)
        WHEN '01' THEN SUBSTR(STVTERM_CODE, 0, 4) || '4'
        WHEN '05' THEN SUBSTR(STVTERM_CODE + 100, 0, 4) || '1'
        WHEN '08' THEN SUBSTR(STVTERM_CODE + 100, 0, 4) || '2'
      END AS SISTERM_ORGUNIT_CODE,
      STVTERM_CODE AS SISTERM_CODE,
      STVTERM_DESC AS SISTERM_DESC,
      STVTERM_START_DATE AS SISTERM_START_DATE,
      STVTERM_END_DATE AS SISTERM_END_DATE,
      CASE WHEN STVTERM_CODE = (
        SELECT
          MAX(I.STVTERM_CODE)
        FROM
          STVTERM@BIPROD_BREPT_LINK_MFOREST I
        WHERE
          I.STVTERM_CODE < (
            SELECT
              MIN(J.STVTERM_CODE)
            FROM
              STVTERM@BIPROD_BREPT_LINK_MFOREST J
            WHERE
              J.STVTERM_END_DATE + 1 > SYSDATE
          )
      ) THEN 1 END AS SISTERM_IS_PREV,
      CASE WHEN STVTERM_CODE = (
        SELECT
          MIN(I.STVTERM_CODE)
        FROM
          STVTERM@BIPROD_BREPT_LINK_MFOREST I
        WHERE
          I.STVTERM_END_DATE + 1 > SYSDATE
      ) THEN 1 END as SISTERM_IS_CURR,
      CASE WHEN STVTERM_CODE = (
        SELECT
          MIN(I.STVTERM_CODE)
        FROM
          STVTERM@BIPROD_BREPT_LINK_MFOREST I
        WHERE
          I.STVTERM_CODE > (
            SELECT
              MIN(J.STVTERM_CODE)
            FROM
              STVTERM@BIPROD_BREPT_LINK_MFOREST J
            WHERE
              J.STVTERM_END_DATE + 1 > SYSDATE
          )
      ) THEN 1 END AS SISTERM_IS_NEXT,
      STVTERM_ACTIVITY_DATE as SISTERM_ACTIVITY_DATE
    FROM
      STVTERM@BIPROD_BREPT_LINK_MFOREST
    WHERE
      STVTERM_CODE >= '201608' AND
      STVTERM_CODE < '999999'
  ) B
ON
  (
    A.SISTERM_CODE = B.SISTERM_CODE
  )
WHEN MATCHED THEN
  UPDATE SET
    A.SISTERM_ORGUNIT_CODE = B.SISTERM_ORGUNIT_CODE,
    A.SISTERM_DESC = B.SISTERM_DESC,
    A.SISTERM_START_DATE = B.SISTERM_START_DATE,
    A.SISTERM_END_DATE = B.SISTERM_END_DATE,
    A.SISTERM_IS_PREV = B.SISTERM_IS_PREV,
    A.SISTERM_IS_CURR = B.SISTERM_IS_CURR,
    A.SISTERM_IS_NEXT = B.SISTERM_IS_NEXT,
    A.SISTERM_ACTIVITY_DATE = B.SISTERM_ACTIVITY_DATE,
    A.SISTERM_UPDATE_DATE = SYSDATE
  WHERE
    NVL(A.SISTERM_ORGUNIT_CODE, 0) != NVL(B.SISTERM_ORGUNIT_CODE, 0) OR
    NVL(A.SISTERM_DESC, 0) != NVL(B.SISTERM_DESC, 0) OR
    NVL(A.SISTERM_START_DATE, SYSDATE) != NVL(B.SISTERM_START_DATE, SYSDATE) OR
    NVL(A.SISTERM_END_DATE, SYSDATE) != NVL(B.SISTERM_END_DATE, SYSDATE) OR
    NVL(A.SISTERM_IS_PREV, 0) != NVL(B.SISTERM_IS_PREV, 0) OR
    NVL(A.SISTERM_IS_CURR, 0) != NVL(B.SISTERM_IS_CURR, 0) OR
    NVL(A.SISTERM_IS_NEXT, 0) != NVL(B.SISTERM_IS_NEXT, 0) OR
    NVL(A.SISTERM_ACTIVITY_DATE, SYSDATE) != NVL(B.SISTERM_ACTIVITY_DATE, SYSDATE)
WHEN NOT MATCHED THEN
  INSERT
    (
      A.SISTERM_ORGUNIT_CODE,
      A.SISTERM_CODE,
      A.SISTERM_DESC,
      A.SISTERM_START_DATE,
      A.SISTERM_END_DATE,
      A.SISTERM_IS_PREV,
      A.SISTERM_IS_CURR,
      A.SISTERM_IS_NEXT,
      A.SISTERM_ACTIVITY_DATE,
      A.SISTERM_CREATE_DATE,
      A.SISTERM_UPDATE_DATE
    )
  VALUES
    (
      B.SISTERM_ORGUNIT_CODE,
      B.SISTERM_CODE,
      B.SISTERM_DESC,
      B.SISTERM_START_DATE,
      B.SISTERM_END_DATE,
      B.SISTERM_IS_PREV,
      B.SISTERM_IS_CURR,
      B.SISTERM_IS_NEXT,
      B.SISTERM_ACTIVITY_DATE,
      SYSDATE,
      SYSDATE
    )
;

DELETE FROM
  SISTERM
WHERE
  NOT EXISTS (
    SELECT
      1
    FROM
      STVTERM@BIPROD_BREPT_LINK_MFOREST
    WHERE
      STVTERM_CODE = SISTERM_CODE
  )
;

COMMIT;

QUIT;
